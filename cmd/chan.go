package main

import (
	"fmt"
)

func chan_func() {

	// チャネルは、ゴルーチンとゴルーチンの間でデータの受け渡しを司るためにデザインされた、Go特有のデータ構造
	// つまり、ゴルーチンによる非同期処理を必要としないプログラムでは、原則使用する必要はない

	// int型のチャネルを表す型
	var ch chan int

	// チャネルには、Goの他データ型にはない特殊なサブタイプを指定可能
	// <-chanを使用すると、そのチャネルは受信専用チャネルとなる
	var ch1 <-chan int
	// chan<-を使用すると、送信専用チャネルとなる
	var ch2 chan<- int
	// このようなオプションを指定しないchanは、送受信可能な双方向チャネルとして機能する

	// Goのデータ型は厳密であり、異なる型の変数同士の代入は原則コンパイルエラーになる
	// しかし、チャネルのサブタイプは少し事情が異なる
	var (
		ch3 chan int
		ch4 <-chan int
		ch5 chan<- int
	)
	// 下記は、チャネルとそのサブタイプ間における代入可否
	// 送受信可能な双方向チャネルのみ、受信専用,送信専用に代入可能。それ以外はNG
	ch4 = ch3  // OK
	ch5 = ch3  // OK
	ch3 = ch4  // NG
	ch5 = ch4  // NG
	ch3 = ch5  // NG
	ch4 = ch5  // NG

	// チャネル自身は、本質的には受信も送信も可能なキューのようなデータ構造
	// 実際は多くの場面で、受信専用として処理されるか、送信専用として処理されるか、明確に分かれる
	// 基本となるのは、あくまでchanではあるものの、「局面に応じて<-chanやchan<-に切り替えることを意図した仕組み」であることを理解する

	// チャネルに関しても、組み込み関数makeを使用して生成可能
	// makeへ２番目の引数を渡すことで、チャネルのバッファサイズを指定可能
	// 明示的に指定されていない場合、バッファサイズは0
	ch6 := make(chan int)     // バッファサイズ：0
	ch7 := make(chan int, 8)  // バッファサイズ：8

	// チャネルとは、キュー（待ち行列）の性質を備えるデータ構造
	// チャネルのバッファとは、このキューを格納する領域のこと
	// すなわち、キューのサイズと見なすことができる

	// キューにはFIFOの性質があり、先にキューにenqueueされたデータを、先にdequeueできるという特性がある
	// すなわち、データを取り出す順序が保証されるという特性があり、Goのチャネルも同様の性質を備えている

	// チャネルが保持するデータに対する操作は「送信」か「受信」の２パターンのみ
	// 送受信ともに演算子<-を使用
	ch8 := make(chan int, 10)
	// チャネルに整数５を送信
	ch8 <- 5
	// チャネルから整数値を受信
	i := <-ch8
}